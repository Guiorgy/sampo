#!/usr/bin/env bash
# Original author: Avleen Vig, 2012
# Copyright (C) Jacob Salmela, 2020 <me@jacobsalmela.com> (sampo)
#
# This file is part of sampo.
#
# Note: this file should only ever be sourced by sampo.sh or build.sh and should not be exceuted directly
# thus its permissions are set to 644 intentionally
#
# ${BASH_SOURCE[0]} is the name of the current file that the shell is reading regardless of whether it is being sourced or executed
# ${0} is the name of the current file being executed
# ${0} here can be either:
#    - build.sh during build time when sourced from build.sh
#    - sampo.sh during runtime when sourced from sampo.sh
# build.sh only cares about the vars as the other functions will not be found from the build script
# sampo.sh will source this file in order to respond to user-defined endpoints
# thus, if the script is being sourced and ${0} equals
if [[ "${BASH_SOURCE[0]}" -ef "${0}" ]]; then
  echo "This script should not be executed directly.  It is only meant to be sourced by sampo.sh or build.sh"
  exit 1

else

  if [[ "$(basename ${0})" == "build.sh" ]] || [[ "$(basename ${0})" == "sampo.sh" ]] ; then
    # echo "Sourcing variables $(basename ${BASH_SOURCE[0]}) from $(basename ${0})"
    #shellcheck disable=SC2034
    PORT=1042
    LOCAL_PORT=1042
    SAMPO_BASE="$(dirname "${BASH_SOURCE[0]}")"
  fi

  # If the script is being sourced by sampo.sh, then we need to define the functions
  if [[ "$(basename ${0})" == "sampo.sh" ]] ; then
    # echo "Sourcing endpoints defined in $(basename ${BASH_SOURCE[0]}) from $(basename ${0})"
    # You can configure sampo by modifying sampo.conf
    #
    # This config file is mainly for defining endpoints a client will use
    # You can add any arbitrary shell code here, but it's usually easier
    # to define only your endpoints the functions they should call here
    # Those functions and any custom ones should be added to sampo.sh
    #
    # Rules usage line:
    #    match_uri REGEX command [args]
    #
    # match_uri:
    #   On an incoming request, the URI is checked against the regex.
    #   If one is found, the specified command is executed with the specified arguments.
    #
    #   This function will also pass the results of the regex match,
    #   ${BASH_REMATCH[@]} as additional arguments to the command.
    #
    # If you don't pass anything, this will list all of the endpints you have defined.
    # This is useful for debugging when making your own endpoints and functions,
    # but it just shows how you can make a function in shell code in sampo.sh
    # and use the match_uri to run some arbitrary shell code
    # This also serves as an easy way for your end-users to see the available endpoints and their functions by simply calling the root of the API
    match_uri '^/$' list_endpoints

    # The /file endpoint returns the content of the file specified in the URI
    # match_uri '^/file/(.*)$' serve_file

    # The /dir endpoint returns the output of a dir using ls
    # match_uri '^/dir/(.*)$' serve_dir_with_ls

    #
    # Create your own endpoints below
    #
    # sampo is designed to be as drop-in as possible
    # to get started, you need a folder on a server somewhere that has:
    #    - sampo.sh
    #    - sampo.conf
    #    - scripts/
    #
    # just dump all of your custom scripts into the scripts folder
    # and then they will be accessible to you to create endpoints
    #
    #
    # match_uri '^/custom$' run_external_script "${SAMPO_BASE}"/scripts/yourscript.sh
    #
    # You can also write shell code directly in this config by creating functions
    # and then creating a match_uri to go with it
    # your function must be defined before the match_uri that calls it
    # while not as clean, this can be useful for simple endpoints
    # but it is usually easier to only define your endpoints here
    #
    # an example of an endpoint that returns arbitrary text:
    #
    # rusty_fork() {
    #    append_header "Content-Type" "text/plain"
    #    # calling curl http://localhost:1042/fork/done will echo the text:
    #    #     "stick a rusty fork in me, I am done"
    #    send_response 200 <<< "Stick a rusty fork in me, I am $2"
    # }
    # # A simple echo endpoint to returns arbitrary text with a given argument
    # match_uri '^/fork/(.*)$' \
    #   rusty_fork
  fi
fi
